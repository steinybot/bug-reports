/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.com.lightbend.console.api.GetMetricsRequest', null, global);
goog.exportSymbol('proto.com.lightbend.console.api.MatrixResult', null, global);
goog.exportSymbol('proto.com.lightbend.console.api.MetricsResponse', null, global);
goog.exportSymbol('proto.com.lightbend.console.api.Sample', null, global);
goog.exportSymbol('proto.com.lightbend.console.api.ScalarDataPoint', null, global);
goog.exportSymbol('proto.com.lightbend.console.api.Series', null, global);
goog.exportSymbol('proto.com.lightbend.console.api.StringDataPoint', null, global);
goog.exportSymbol('proto.com.lightbend.console.api.VectorResult', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.lightbend.console.api.GetMetricsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.lightbend.console.api.GetMetricsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.lightbend.console.api.GetMetricsRequest.displayName = 'proto.com.lightbend.console.api.GetMetricsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.lightbend.console.api.MetricsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.com.lightbend.console.api.MetricsResponse.repeatedFields_, proto.com.lightbend.console.api.MetricsResponse.oneofGroups_);
};
goog.inherits(proto.com.lightbend.console.api.MetricsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.lightbend.console.api.MetricsResponse.displayName = 'proto.com.lightbend.console.api.MetricsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.lightbend.console.api.MatrixResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.com.lightbend.console.api.MatrixResult.repeatedFields_, null);
};
goog.inherits(proto.com.lightbend.console.api.MatrixResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.lightbend.console.api.MatrixResult.displayName = 'proto.com.lightbend.console.api.MatrixResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.lightbend.console.api.Series = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.com.lightbend.console.api.Series.repeatedFields_, null);
};
goog.inherits(proto.com.lightbend.console.api.Series, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.lightbend.console.api.Series.displayName = 'proto.com.lightbend.console.api.Series';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.lightbend.console.api.VectorResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.com.lightbend.console.api.VectorResult.repeatedFields_, null);
};
goog.inherits(proto.com.lightbend.console.api.VectorResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.lightbend.console.api.VectorResult.displayName = 'proto.com.lightbend.console.api.VectorResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.lightbend.console.api.Sample = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.lightbend.console.api.Sample, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.lightbend.console.api.Sample.displayName = 'proto.com.lightbend.console.api.Sample';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.lightbend.console.api.ScalarDataPoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.lightbend.console.api.ScalarDataPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.lightbend.console.api.ScalarDataPoint.displayName = 'proto.com.lightbend.console.api.ScalarDataPoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.lightbend.console.api.StringDataPoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.lightbend.console.api.StringDataPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.lightbend.console.api.StringDataPoint.displayName = 'proto.com.lightbend.console.api.StringDataPoint';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.lightbend.console.api.GetMetricsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.com.lightbend.console.api.GetMetricsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.lightbend.console.api.GetMetricsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.lightbend.console.api.GetMetricsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    query: jspb.Message.getFieldWithDefault(msg, 1, ""),
    time: jspb.Message.getFieldWithDefault(msg, 2, ""),
    timeout: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.lightbend.console.api.GetMetricsRequest}
 */
proto.com.lightbend.console.api.GetMetricsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.lightbend.console.api.GetMetricsRequest;
  return proto.com.lightbend.console.api.GetMetricsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.lightbend.console.api.GetMetricsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.lightbend.console.api.GetMetricsRequest}
 */
proto.com.lightbend.console.api.GetMetricsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTime(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimeout(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.lightbend.console.api.GetMetricsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.lightbend.console.api.GetMetricsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.lightbend.console.api.GetMetricsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.lightbend.console.api.GetMetricsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTime();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTimeout();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string query = 1;
 * @return {string}
 */
proto.com.lightbend.console.api.GetMetricsRequest.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.lightbend.console.api.GetMetricsRequest.prototype.setQuery = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string time = 2;
 * @return {string}
 */
proto.com.lightbend.console.api.GetMetricsRequest.prototype.getTime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.com.lightbend.console.api.GetMetricsRequest.prototype.setTime = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string timeout = 3;
 * @return {string}
 */
proto.com.lightbend.console.api.GetMetricsRequest.prototype.getTimeout = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.com.lightbend.console.api.GetMetricsRequest.prototype.setTimeout = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.com.lightbend.console.api.MetricsResponse.repeatedFields_ = [8];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.com.lightbend.console.api.MetricsResponse.oneofGroups_ = [[2,3,4,5]];

/**
 * @enum {number}
 */
proto.com.lightbend.console.api.MetricsResponse.DataCase = {
  DATA_NOT_SET: 0,
  MATRIX: 2,
  VECTOR: 3,
  SCALAR: 4,
  STRING: 5
};

/**
 * @return {proto.com.lightbend.console.api.MetricsResponse.DataCase}
 */
proto.com.lightbend.console.api.MetricsResponse.prototype.getDataCase = function() {
  return /** @type {proto.com.lightbend.console.api.MetricsResponse.DataCase} */(jspb.Message.computeOneofCase(this, proto.com.lightbend.console.api.MetricsResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.lightbend.console.api.MetricsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.com.lightbend.console.api.MetricsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.lightbend.console.api.MetricsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.lightbend.console.api.MetricsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getFieldWithDefault(msg, 1, false),
    matrix: (f = msg.getMatrix()) && proto.com.lightbend.console.api.MatrixResult.toObject(includeInstance, f),
    vector: (f = msg.getVector()) && proto.com.lightbend.console.api.VectorResult.toObject(includeInstance, f),
    scalar: (f = msg.getScalar()) && proto.com.lightbend.console.api.ScalarDataPoint.toObject(includeInstance, f),
    string: (f = msg.getString()) && proto.com.lightbend.console.api.StringDataPoint.toObject(includeInstance, f),
    errorType: jspb.Message.getFieldWithDefault(msg, 6, ""),
    error: jspb.Message.getFieldWithDefault(msg, 7, ""),
    warningsList: jspb.Message.getRepeatedField(msg, 8)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.lightbend.console.api.MetricsResponse}
 */
proto.com.lightbend.console.api.MetricsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.lightbend.console.api.MetricsResponse;
  return proto.com.lightbend.console.api.MetricsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.lightbend.console.api.MetricsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.lightbend.console.api.MetricsResponse}
 */
proto.com.lightbend.console.api.MetricsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = new proto.com.lightbend.console.api.MatrixResult;
      reader.readMessage(value,proto.com.lightbend.console.api.MatrixResult.deserializeBinaryFromReader);
      msg.setMatrix(value);
      break;
    case 3:
      var value = new proto.com.lightbend.console.api.VectorResult;
      reader.readMessage(value,proto.com.lightbend.console.api.VectorResult.deserializeBinaryFromReader);
      msg.setVector(value);
      break;
    case 4:
      var value = new proto.com.lightbend.console.api.ScalarDataPoint;
      reader.readMessage(value,proto.com.lightbend.console.api.ScalarDataPoint.deserializeBinaryFromReader);
      msg.setScalar(value);
      break;
    case 5:
      var value = new proto.com.lightbend.console.api.StringDataPoint;
      reader.readMessage(value,proto.com.lightbend.console.api.StringDataPoint.deserializeBinaryFromReader);
      msg.setString(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorType(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.addWarnings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.lightbend.console.api.MetricsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.lightbend.console.api.MetricsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.lightbend.console.api.MetricsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.lightbend.console.api.MetricsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getMatrix();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.com.lightbend.console.api.MatrixResult.serializeBinaryToWriter
    );
  }
  f = message.getVector();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.com.lightbend.console.api.VectorResult.serializeBinaryToWriter
    );
  }
  f = message.getScalar();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.com.lightbend.console.api.ScalarDataPoint.serializeBinaryToWriter
    );
  }
  f = message.getString();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.com.lightbend.console.api.StringDataPoint.serializeBinaryToWriter
    );
  }
  f = message.getErrorType();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getWarningsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      8,
      f
    );
  }
};


/**
 * optional bool success = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.lightbend.console.api.MetricsResponse.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.lightbend.console.api.MetricsResponse.prototype.setSuccess = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional MatrixResult matrix = 2;
 * @return {?proto.com.lightbend.console.api.MatrixResult}
 */
proto.com.lightbend.console.api.MetricsResponse.prototype.getMatrix = function() {
  return /** @type{?proto.com.lightbend.console.api.MatrixResult} */ (
    jspb.Message.getWrapperField(this, proto.com.lightbend.console.api.MatrixResult, 2));
};


/** @param {?proto.com.lightbend.console.api.MatrixResult|undefined} value */
proto.com.lightbend.console.api.MetricsResponse.prototype.setMatrix = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.com.lightbend.console.api.MetricsResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.com.lightbend.console.api.MetricsResponse.prototype.clearMatrix = function() {
  this.setMatrix(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.lightbend.console.api.MetricsResponse.prototype.hasMatrix = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional VectorResult vector = 3;
 * @return {?proto.com.lightbend.console.api.VectorResult}
 */
proto.com.lightbend.console.api.MetricsResponse.prototype.getVector = function() {
  return /** @type{?proto.com.lightbend.console.api.VectorResult} */ (
    jspb.Message.getWrapperField(this, proto.com.lightbend.console.api.VectorResult, 3));
};


/** @param {?proto.com.lightbend.console.api.VectorResult|undefined} value */
proto.com.lightbend.console.api.MetricsResponse.prototype.setVector = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.com.lightbend.console.api.MetricsResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.com.lightbend.console.api.MetricsResponse.prototype.clearVector = function() {
  this.setVector(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.lightbend.console.api.MetricsResponse.prototype.hasVector = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ScalarDataPoint scalar = 4;
 * @return {?proto.com.lightbend.console.api.ScalarDataPoint}
 */
proto.com.lightbend.console.api.MetricsResponse.prototype.getScalar = function() {
  return /** @type{?proto.com.lightbend.console.api.ScalarDataPoint} */ (
    jspb.Message.getWrapperField(this, proto.com.lightbend.console.api.ScalarDataPoint, 4));
};


/** @param {?proto.com.lightbend.console.api.ScalarDataPoint|undefined} value */
proto.com.lightbend.console.api.MetricsResponse.prototype.setScalar = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.com.lightbend.console.api.MetricsResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.com.lightbend.console.api.MetricsResponse.prototype.clearScalar = function() {
  this.setScalar(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.lightbend.console.api.MetricsResponse.prototype.hasScalar = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional StringDataPoint string = 5;
 * @return {?proto.com.lightbend.console.api.StringDataPoint}
 */
proto.com.lightbend.console.api.MetricsResponse.prototype.getString = function() {
  return /** @type{?proto.com.lightbend.console.api.StringDataPoint} */ (
    jspb.Message.getWrapperField(this, proto.com.lightbend.console.api.StringDataPoint, 5));
};


/** @param {?proto.com.lightbend.console.api.StringDataPoint|undefined} value */
proto.com.lightbend.console.api.MetricsResponse.prototype.setString = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.com.lightbend.console.api.MetricsResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.com.lightbend.console.api.MetricsResponse.prototype.clearString = function() {
  this.setString(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.lightbend.console.api.MetricsResponse.prototype.hasString = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string error_type = 6;
 * @return {string}
 */
proto.com.lightbend.console.api.MetricsResponse.prototype.getErrorType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.com.lightbend.console.api.MetricsResponse.prototype.setErrorType = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string error = 7;
 * @return {string}
 */
proto.com.lightbend.console.api.MetricsResponse.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.com.lightbend.console.api.MetricsResponse.prototype.setError = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * repeated string warnings = 8;
 * @return {!Array<string>}
 */
proto.com.lightbend.console.api.MetricsResponse.prototype.getWarningsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 8));
};


/** @param {!Array<string>} value */
proto.com.lightbend.console.api.MetricsResponse.prototype.setWarningsList = function(value) {
  jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.com.lightbend.console.api.MetricsResponse.prototype.addWarnings = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.com.lightbend.console.api.MetricsResponse.prototype.clearWarningsList = function() {
  this.setWarningsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.com.lightbend.console.api.MatrixResult.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.lightbend.console.api.MatrixResult.prototype.toObject = function(opt_includeInstance) {
  return proto.com.lightbend.console.api.MatrixResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.lightbend.console.api.MatrixResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.lightbend.console.api.MatrixResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    seriesList: jspb.Message.toObjectList(msg.getSeriesList(),
    proto.com.lightbend.console.api.Series.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.lightbend.console.api.MatrixResult}
 */
proto.com.lightbend.console.api.MatrixResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.lightbend.console.api.MatrixResult;
  return proto.com.lightbend.console.api.MatrixResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.lightbend.console.api.MatrixResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.lightbend.console.api.MatrixResult}
 */
proto.com.lightbend.console.api.MatrixResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.com.lightbend.console.api.Series;
      reader.readMessage(value,proto.com.lightbend.console.api.Series.deserializeBinaryFromReader);
      msg.addSeries(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.lightbend.console.api.MatrixResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.lightbend.console.api.MatrixResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.lightbend.console.api.MatrixResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.lightbend.console.api.MatrixResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.com.lightbend.console.api.Series.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Series series = 1;
 * @return {!Array<!proto.com.lightbend.console.api.Series>}
 */
proto.com.lightbend.console.api.MatrixResult.prototype.getSeriesList = function() {
  return /** @type{!Array<!proto.com.lightbend.console.api.Series>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.com.lightbend.console.api.Series, 1));
};


/** @param {!Array<!proto.com.lightbend.console.api.Series>} value */
proto.com.lightbend.console.api.MatrixResult.prototype.setSeriesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.com.lightbend.console.api.Series=} opt_value
 * @param {number=} opt_index
 * @return {!proto.com.lightbend.console.api.Series}
 */
proto.com.lightbend.console.api.MatrixResult.prototype.addSeries = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.com.lightbend.console.api.Series, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.com.lightbend.console.api.MatrixResult.prototype.clearSeriesList = function() {
  this.setSeriesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.com.lightbend.console.api.Series.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.lightbend.console.api.Series.prototype.toObject = function(opt_includeInstance) {
  return proto.com.lightbend.console.api.Series.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.lightbend.console.api.Series} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.lightbend.console.api.Series.toObject = function(includeInstance, msg) {
  var f, obj = {
    labelsMap: (f = msg.getLabelsMap()) ? f.toObject(includeInstance, undefined) : [],
    pointsList: jspb.Message.toObjectList(msg.getPointsList(),
    proto.com.lightbend.console.api.ScalarDataPoint.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.lightbend.console.api.Series}
 */
proto.com.lightbend.console.api.Series.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.lightbend.console.api.Series;
  return proto.com.lightbend.console.api.Series.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.lightbend.console.api.Series} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.lightbend.console.api.Series}
 */
proto.com.lightbend.console.api.Series.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getLabelsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    case 2:
      var value = new proto.com.lightbend.console.api.ScalarDataPoint;
      reader.readMessage(value,proto.com.lightbend.console.api.ScalarDataPoint.deserializeBinaryFromReader);
      msg.addPoints(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.lightbend.console.api.Series.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.lightbend.console.api.Series.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.lightbend.console.api.Series} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.lightbend.console.api.Series.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabelsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getPointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.com.lightbend.console.api.ScalarDataPoint.serializeBinaryToWriter
    );
  }
};


/**
 * map<string, string> labels = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.com.lightbend.console.api.Series.prototype.getLabelsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.com.lightbend.console.api.Series.prototype.clearLabelsMap = function() {
  this.getLabelsMap().clear();
};


/**
 * repeated ScalarDataPoint points = 2;
 * @return {!Array<!proto.com.lightbend.console.api.ScalarDataPoint>}
 */
proto.com.lightbend.console.api.Series.prototype.getPointsList = function() {
  return /** @type{!Array<!proto.com.lightbend.console.api.ScalarDataPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.com.lightbend.console.api.ScalarDataPoint, 2));
};


/** @param {!Array<!proto.com.lightbend.console.api.ScalarDataPoint>} value */
proto.com.lightbend.console.api.Series.prototype.setPointsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.com.lightbend.console.api.ScalarDataPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.com.lightbend.console.api.ScalarDataPoint}
 */
proto.com.lightbend.console.api.Series.prototype.addPoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.com.lightbend.console.api.ScalarDataPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.com.lightbend.console.api.Series.prototype.clearPointsList = function() {
  this.setPointsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.com.lightbend.console.api.VectorResult.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.lightbend.console.api.VectorResult.prototype.toObject = function(opt_includeInstance) {
  return proto.com.lightbend.console.api.VectorResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.lightbend.console.api.VectorResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.lightbend.console.api.VectorResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    samplesList: jspb.Message.toObjectList(msg.getSamplesList(),
    proto.com.lightbend.console.api.Sample.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.lightbend.console.api.VectorResult}
 */
proto.com.lightbend.console.api.VectorResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.lightbend.console.api.VectorResult;
  return proto.com.lightbend.console.api.VectorResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.lightbend.console.api.VectorResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.lightbend.console.api.VectorResult}
 */
proto.com.lightbend.console.api.VectorResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.com.lightbend.console.api.Sample;
      reader.readMessage(value,proto.com.lightbend.console.api.Sample.deserializeBinaryFromReader);
      msg.addSamples(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.lightbend.console.api.VectorResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.lightbend.console.api.VectorResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.lightbend.console.api.VectorResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.lightbend.console.api.VectorResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSamplesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.com.lightbend.console.api.Sample.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Sample samples = 1;
 * @return {!Array<!proto.com.lightbend.console.api.Sample>}
 */
proto.com.lightbend.console.api.VectorResult.prototype.getSamplesList = function() {
  return /** @type{!Array<!proto.com.lightbend.console.api.Sample>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.com.lightbend.console.api.Sample, 1));
};


/** @param {!Array<!proto.com.lightbend.console.api.Sample>} value */
proto.com.lightbend.console.api.VectorResult.prototype.setSamplesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.com.lightbend.console.api.Sample=} opt_value
 * @param {number=} opt_index
 * @return {!proto.com.lightbend.console.api.Sample}
 */
proto.com.lightbend.console.api.VectorResult.prototype.addSamples = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.com.lightbend.console.api.Sample, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.com.lightbend.console.api.VectorResult.prototype.clearSamplesList = function() {
  this.setSamplesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.lightbend.console.api.Sample.prototype.toObject = function(opt_includeInstance) {
  return proto.com.lightbend.console.api.Sample.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.lightbend.console.api.Sample} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.lightbend.console.api.Sample.toObject = function(includeInstance, msg) {
  var f, obj = {
    labelsMap: (f = msg.getLabelsMap()) ? f.toObject(includeInstance, undefined) : [],
    point: (f = msg.getPoint()) && proto.com.lightbend.console.api.ScalarDataPoint.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.lightbend.console.api.Sample}
 */
proto.com.lightbend.console.api.Sample.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.lightbend.console.api.Sample;
  return proto.com.lightbend.console.api.Sample.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.lightbend.console.api.Sample} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.lightbend.console.api.Sample}
 */
proto.com.lightbend.console.api.Sample.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getLabelsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    case 2:
      var value = new proto.com.lightbend.console.api.ScalarDataPoint;
      reader.readMessage(value,proto.com.lightbend.console.api.ScalarDataPoint.deserializeBinaryFromReader);
      msg.setPoint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.lightbend.console.api.Sample.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.lightbend.console.api.Sample.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.lightbend.console.api.Sample} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.lightbend.console.api.Sample.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabelsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getPoint();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.com.lightbend.console.api.ScalarDataPoint.serializeBinaryToWriter
    );
  }
};


/**
 * map<string, string> labels = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.com.lightbend.console.api.Sample.prototype.getLabelsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.com.lightbend.console.api.Sample.prototype.clearLabelsMap = function() {
  this.getLabelsMap().clear();
};


/**
 * optional ScalarDataPoint point = 2;
 * @return {?proto.com.lightbend.console.api.ScalarDataPoint}
 */
proto.com.lightbend.console.api.Sample.prototype.getPoint = function() {
  return /** @type{?proto.com.lightbend.console.api.ScalarDataPoint} */ (
    jspb.Message.getWrapperField(this, proto.com.lightbend.console.api.ScalarDataPoint, 2));
};


/** @param {?proto.com.lightbend.console.api.ScalarDataPoint|undefined} value */
proto.com.lightbend.console.api.Sample.prototype.setPoint = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.com.lightbend.console.api.Sample.prototype.clearPoint = function() {
  this.setPoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.lightbend.console.api.Sample.prototype.hasPoint = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.lightbend.console.api.ScalarDataPoint.prototype.toObject = function(opt_includeInstance) {
  return proto.com.lightbend.console.api.ScalarDataPoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.lightbend.console.api.ScalarDataPoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.lightbend.console.api.ScalarDataPoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),
    value: +jspb.Message.getFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.lightbend.console.api.ScalarDataPoint}
 */
proto.com.lightbend.console.api.ScalarDataPoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.lightbend.console.api.ScalarDataPoint;
  return proto.com.lightbend.console.api.ScalarDataPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.lightbend.console.api.ScalarDataPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.lightbend.console.api.ScalarDataPoint}
 */
proto.com.lightbend.console.api.ScalarDataPoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.lightbend.console.api.ScalarDataPoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.lightbend.console.api.ScalarDataPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.lightbend.console.api.ScalarDataPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.lightbend.console.api.ScalarDataPoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getValue();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional int64 timestamp = 1;
 * @return {number}
 */
proto.com.lightbend.console.api.ScalarDataPoint.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.lightbend.console.api.ScalarDataPoint.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional double value = 2;
 * @return {number}
 */
proto.com.lightbend.console.api.ScalarDataPoint.prototype.getValue = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.com.lightbend.console.api.ScalarDataPoint.prototype.setValue = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.lightbend.console.api.StringDataPoint.prototype.toObject = function(opt_includeInstance) {
  return proto.com.lightbend.console.api.StringDataPoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.lightbend.console.api.StringDataPoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.lightbend.console.api.StringDataPoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),
    value: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.lightbend.console.api.StringDataPoint}
 */
proto.com.lightbend.console.api.StringDataPoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.lightbend.console.api.StringDataPoint;
  return proto.com.lightbend.console.api.StringDataPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.lightbend.console.api.StringDataPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.lightbend.console.api.StringDataPoint}
 */
proto.com.lightbend.console.api.StringDataPoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.lightbend.console.api.StringDataPoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.lightbend.console.api.StringDataPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.lightbend.console.api.StringDataPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.lightbend.console.api.StringDataPoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int64 timestamp = 1;
 * @return {number}
 */
proto.com.lightbend.console.api.StringDataPoint.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.lightbend.console.api.StringDataPoint.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.com.lightbend.console.api.StringDataPoint.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.com.lightbend.console.api.StringDataPoint.prototype.setValue = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.com.lightbend.console.api);
